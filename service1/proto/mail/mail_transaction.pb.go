// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mail_transaction.proto

package mail

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Mail transaction being enriched during the different steps in the pipeline.
// Transaction context - the rule of thumb is that if we need it after data fetch service we will attach to
// the tx itself such as the O365 user_id field which is an unmanaged Cyren user.
type MailTransaction struct {
	// generated tx uuid or the actual arrived notification tx id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// subscription_id
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// user_id
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// connection_id
	ConnectionId string `protobuf:"bytes,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// created tx time
	TxCreatedAt int64 `protobuf:"varint,5,opt,name=tx_created_at,json=txCreatedAt,proto3" json:"tx_created_at,omitempty"`
	// Reported by System/Employee email
	ReportedBy string `protobuf:"bytes,6,opt,name=reported_by,json=reportedBy,proto3" json:"reported_by,omitempty"`
	Trace      string `protobuf:"bytes,7,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (m *MailTransaction) Reset()         { *m = MailTransaction{} }
func (m *MailTransaction) String() string { return proto.CompactTextString(m) }
func (*MailTransaction) ProtoMessage()    {}
func (*MailTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_mail_transaction_7fc9860c5b6975ec, []int{0}
}
func (m *MailTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MailTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailTransaction.Merge(dst, src)
}
func (m *MailTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MailTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MailTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MailTransaction proto.InternalMessageInfo

func (m *MailTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MailTransaction) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *MailTransaction) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *MailTransaction) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MailTransaction) GetTxCreatedAt() int64 {
	if m != nil {
		return m.TxCreatedAt
	}
	return 0
}

func (m *MailTransaction) GetReportedBy() string {
	if m != nil {
		return m.ReportedBy
	}
	return ""
}

func (m *MailTransaction) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

func init() {
	proto.RegisterType((*MailTransaction)(nil), "mail.MailTransaction")
}
func (m *MailTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailTransaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMailTransaction(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.SubscriptionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMailTransaction(dAtA, i, uint64(len(m.SubscriptionId)))
		i += copy(dAtA[i:], m.SubscriptionId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMailTransaction(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ConnectionId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMailTransaction(dAtA, i, uint64(len(m.ConnectionId)))
		i += copy(dAtA[i:], m.ConnectionId)
	}
	if m.TxCreatedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMailTransaction(dAtA, i, uint64(m.TxCreatedAt))
	}
	if len(m.ReportedBy) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMailTransaction(dAtA, i, uint64(len(m.ReportedBy)))
		i += copy(dAtA[i:], m.ReportedBy)
	}
	if len(m.Trace) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMailTransaction(dAtA, i, uint64(len(m.Trace)))
		i += copy(dAtA[i:], m.Trace)
	}
	return i, nil
}

func encodeVarintMailTransaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MailTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMailTransaction(uint64(l))
	}
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovMailTransaction(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovMailTransaction(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovMailTransaction(uint64(l))
	}
	if m.TxCreatedAt != 0 {
		n += 1 + sovMailTransaction(uint64(m.TxCreatedAt))
	}
	l = len(m.ReportedBy)
	if l > 0 {
		n += 1 + l + sovMailTransaction(uint64(l))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovMailTransaction(uint64(l))
	}
	return n
}

func sovMailTransaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMailTransaction(x uint64) (n int) {
	return sovMailTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MailTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCreatedAt", wireType)
			}
			m.TxCreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMailTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMailTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMailTransaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMailTransaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMailTransaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMailTransaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMailTransaction   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("mail_transaction.proto", fileDescriptor_mail_transaction_7fc9860c5b6975ec)
}

var fileDescriptor_mail_transaction_7fc9860c5b6975ec = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4f, 0xc2, 0x40,
	0x14, 0xc6, 0xb9, 0x02, 0x25, 0x1e, 0x22, 0xc9, 0xc5, 0x90, 0x8b, 0xc3, 0x41, 0x74, 0x90, 0x98,
	0x40, 0x07, 0x13, 0x77, 0x71, 0x62, 0x70, 0x21, 0x0e, 0x6e, 0xcd, 0xf5, 0xee, 0x82, 0x17, 0xa1,
	0xd7, 0x5c, 0x5f, 0x05, 0xfe, 0x06, 0x17, 0xff, 0x2c, 0x47, 0x46, 0x37, 0x4d, 0xfb, 0x8f, 0x98,
	0x6b, 0x83, 0xd8, 0xed, 0xbd, 0xef, 0xfb, 0xbd, 0xef, 0x4b, 0x1e, 0x1e, 0xac, 0xb9, 0x5e, 0x85,
	0x60, 0x79, 0x9c, 0x72, 0x01, 0xda, 0xc4, 0xd3, 0xc4, 0x1a, 0x30, 0xa4, 0xe5, 0xf4, 0x8b, 0xbb,
	0xa5, 0x86, 0x97, 0x2c, 0x9a, 0x0a, 0xb3, 0x0e, 0xd6, 0x1b, 0x0d, 0xaf, 0x66, 0x13, 0x2c, 0xcd,
	0xa4, 0x44, 0x26, 0x6f, 0x7c, 0xa5, 0x25, 0x07, 0x63, 0xd3, 0xe0, 0x6f, 0xac, 0xae, 0x2f, 0xdf,
	0x3d, 0xdc, 0x7f, 0xe4, 0x7a, 0xf5, 0x74, 0xcc, 0x25, 0x03, 0xec, 0x69, 0x49, 0xd1, 0x08, 0x8d,
	0x4f, 0x66, 0x7e, 0xfe, 0x3d, 0xf4, 0x9e, 0xd1, 0xc2, 0xd3, 0x92, 0x04, 0xb8, 0x9f, 0x66, 0x51,
	0x2a, 0xac, 0x4e, 0x1c, 0x17, 0x6a, 0x49, 0xbd, 0x1a, 0x74, 0xf6, 0xdf, 0x9e, 0x4b, 0x32, 0xc4,
	0x9d, 0x2c, 0x55, 0xd6, 0x81, 0xcd, 0x1a, 0xe8, 0x3b, 0x79, 0x2e, 0xc9, 0x15, 0xee, 0x09, 0x13,
	0xc7, 0x4a, 0x1c, 0xf2, 0x5a, 0x0e, 0x5b, 0x9c, 0x1e, 0xc5, 0xb9, 0x24, 0x37, 0xb8, 0x07, 0xdb,
	0x50, 0x58, 0xc5, 0x41, 0xc9, 0x90, 0x03, 0x6d, 0x8f, 0xd0, 0xb8, 0x59, 0x65, 0x8d, 0xd0, 0xa2,
	0x0b, 0xdb, 0x87, 0xca, 0xbb, 0x07, 0x72, 0x8d, 0xbb, 0x56, 0x25, 0xc6, 0x3a, 0x32, 0xda, 0x51,
	0xbf, 0xd6, 0x8a, 0x0f, 0xd6, 0x6c, 0x47, 0xce, 0x71, 0x1b, 0x2c, 0x17, 0x8a, 0x76, 0xca, 0xc6,
	0x6a, 0x99, 0xd1, 0xcf, 0x9c, 0xa1, 0x7d, 0xce, 0xd0, 0x4f, 0xce, 0xd0, 0x47, 0xc1, 0x1a, 0xfb,
	0x82, 0x35, 0xbe, 0x0a, 0xd6, 0x88, 0xfc, 0xf2, 0x5d, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x30, 0x84, 0x46, 0x17, 0x86, 0x01, 0x00, 0x00,
}
